using DungeonGeneration.CellularAutomata;
using UnityEngine;

namespace DungeonGeneration.BinarySpacePartitioning
{
    /// <summary>
    /// Workaround non-nullable structs. Defining the room
    /// as its own class allows me to not have a room inside a node
    /// if I don't need to (e.g. node is too small to be partitioned).
    /// </summary>
    public class Room
    {
        // Position and dimensions of the room.
        public Rect Bounds { get; }
        
        // The grid of wall/floor cells generated by
        // Cellular Automata that is used for prefab instantiation.
        public int[,] Grid => _grid;

        private int[,] _grid;

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="x">Start position of the room on the x-axis.</param>
        /// <param name="y">Start position of the room on the y-axis.</param>
        /// <param name="width">Width of the room (number of 1x1 tiles).</param>
        /// <param name="height">Height of the room (number of 1x1 tiles).</param>
        public Room(float x, float y, int width, int height)
        {
            this.Bounds = new Rect(x, y, width, height);

            // Apply local CA smoothing to the room:
            // // 1. Generate a noise grid
            // // 2. Smooth out using CA rules
            this._grid = CellularAutomaton.GenerateNoiseGrid(width, height);
            this._grid = CellularAutomaton.ApplyRules(this._grid);
        }
    }
}
